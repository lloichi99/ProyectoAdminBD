/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package conexiontest;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author joyce
 */
public class jefe_departamento extends javax.swing.JFrame {
    Conexion con= new Conexion();
    Connection conec;
    DefaultTableModel modelo;
    Statement st;
    ResultSet rs;
    int idc;
    /**
     * Creates new form jefe_departamento
     */
    public jefe_departamento() {
        initComponents();
        setLocationRelativeTo(null);
        consultar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtIdJefe = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        txtApMaterno = new javax.swing.JTextField();
        txtApPaterno = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setText("Jefe Departamento");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Apellido Materno:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Id jefe:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Nombre:");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Apellido Paterno:");

        txtIdJefe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdJefeActionPerformed(evt);
            }
        });

        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID_JEFE_DEPARTAMENTO", "NOMBRE", "APELLIDO_PATERNO", "APELLIDO_MATERNO"
            }
        ));
        Tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Tabla);

        jButton1.setText("Agregar");
        jButton1.setBorder(null);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Modificar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton5.setText("Eliminar");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Salir ");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(244, 244, 244)
                            .addComponent(jLabel5))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(30, 30, 30)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtApMaterno, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel4)
                                        .addComponent(jLabel6)
                                        .addComponent(jLabel3))
                                    .addGap(23, 23, 23)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtApPaterno, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtIdJefe, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(57, 57, 57)
                                    .addComponent(jButton2)
                                    .addGap(57, 57, 57)
                                    .addComponent(jButton5))))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(43, 43, 43)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(77, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel5)
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtIdJefe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtApPaterno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtApMaterno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // BOTON AGREGAR
        agregar();
        consultar();
        limpiarCampos();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // BOTON DE MODIFICAR
        Modificar();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // BOTON ELIMINAR
        Eliminar();
        consultar();

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        //BOTON DE SALIR
        this.setVisible(false);
        Menu salir = new Menu();
        salir.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void TablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaMouseClicked
        // TODO add your handling code here:
    txtIdJefe.setEnabled(false);          
    int fila = Tabla.getSelectedRow();
    if (fila == -1) {
        JOptionPane.showMessageDialog(null, "No se selecciona ninguna fila");
    } else {
        int idJefe = Integer.parseInt(Tabla.getValueAt(fila, 0).toString());
        String nombre = (String) Tabla.getValueAt(fila, 1);
        String ap_paterno = (String) Tabla.getValueAt(fila, 2);
        String ap_materno = (String) Tabla.getValueAt(fila, 3);

        txtIdJefe.setText(String.valueOf(idJefe));
        txtNombre.setText(nombre);
        txtApPaterno.setText(ap_paterno);
        txtApMaterno.setText(ap_materno);
    }
    
    
    Tabla.addMouseListener(new MouseAdapter() {
    public void mouseClicked(MouseEvent e) {
        int filaSeleccionada = Tabla.getSelectedRow();
        if (filaSeleccionada >= 0) {
            // Aquí puedes deshabilitar el campo de "ID Genero"
            txtIdJefe.setEnabled(false);
        }
    }
});
    }//GEN-LAST:event_TablaMouseClicked

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        // TODO add your handling code here:
        
      
    }//GEN-LAST:event_jPanel1MouseClicked

    private void txtIdJefeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdJefeActionPerformed
        // TODO add your handling code here:
         // TODO add your handling code here:
         try {
        // Obtener el ID ingresado como texto
        String idUsuarioTexto = txtIdJefe.getText();
        
        // Verificar si el texto es un número entero
        if (idUsuarioTexto.matches("\\d+")) {
            // Convertir el texto a un número entero
            int idUsuario = Integer.parseInt(idUsuarioTexto);
            
            // Llamar al método para consultar y cargar datos por ID
            consultarUsuarioPorID(idUsuario);
        } else {
            JOptionPane.showMessageDialog(null, "Ingrese un número entero válido como ID de usuario.");
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Error al convertir el ID de usuario a número.");
    }
    }//GEN-LAST:event_txtIdJefeActionPerformed

    
    
     private void consultarUsuarioPorID(int idJefe) {
    try {
        String sql = "SELECT * FROM jefe_departamento WHERE ID_JEFE_DEPARTAMENTO = ?";
        conec = con.getConnection();

        try (PreparedStatement pstmt = conec.prepareStatement(sql)) {
            pstmt.setInt(1, idJefe);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                String nombre = rs.getString("NOMBRE");
                String ap_paterno = rs.getString("APELLIDO_PATERNO");
                String ap_materno = rs.getString("APELLIDO_MATERNO");
                txtNombre.setText(nombre);
                txtApPaterno.setText(ap_paterno);
                txtApMaterno.setText(ap_materno);
            } else {
                JOptionPane.showMessageDialog(null, "Usuario no encontrado");
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
}
     
     
       
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(jefe_departamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(jefe_departamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(jefe_departamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(jefe_departamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new jefe_departamento().setVisible(true);
            }
        });
    }
    
    
    void Modificar() {
    String idJefe = txtIdJefe.getText();
    String nombre = txtNombre.getText();
    String ap_paterno = txtApPaterno.getText();
    String ap_materno = txtApMaterno.getText();
    try {
        if (idJefe.equals("") || nombre.equals("") || ap_paterno.equals("") || ap_materno.equals("")) {
            JOptionPane.showMessageDialog(null, "Faltan ingresar Datos");
            limpiarTabla();
            consultar();
        } else {
            // Verificar si el ID que se desea modificar existe
            String checkIDQuery = "SELECT COUNT(*) FROM jefe_departamento WHERE ID_JEFE_DEPARTAMENTO=" + idJefe;
            conec = con.getConnection();
            
            try (Statement st = conec.createStatement()) {
                ResultSet rs = st.executeQuery(checkIDQuery);
                rs.next();
                int rowCount = rs.getInt(1);

                if (rowCount == 0) {
                    JOptionPane.showMessageDialog(null, "El ID que deseas modificar no existe.");
                    limpiarTabla();
                } else {
                    // Si el ID existe, ahora se pueden realizar actualizaciones
                    String updateQuery = "UPDATE jefe_departamento SET NOMBRE = ?, APELLIDO_PATERNO = ?, APELLIDO_MATERNO = ? WHERE ID_JEFE_DEPARTAMENTO = ?";

                    
                    try (PreparedStatement pstmt = conec.prepareStatement(updateQuery)) {
                        pstmt.setString(1, nombre);
                        pstmt.setString(2, ap_paterno);
                        pstmt.setString(3, ap_materno);
                        pstmt.setString(4, idJefe);

                        pstmt.executeUpdate();
                    }

                    JOptionPane.showMessageDialog(null, "Datos de la tabla jefes modificados");
                    limpiarCampos();
                    consultar();
                    
                }
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
    } 
}

 void consultar(){
        limpiarTabla();
        String sql = "select * from jefe_departamento";
        
        try{
            conec = con.getConnection();
            st = conec.createStatement();
            rs = st.executeQuery(sql);
            Object[] jefe = new Object[4];
            modelo =(DefaultTableModel)Tabla.getModel();
            while(rs.next()){
                jefe[0]= rs.getInt("ID_JEFE_DEPARTAMENTO");
                jefe[1]=rs.getString("NOMBRE");
                jefe[2]=rs.getString("APELLIDO_PATERNO");
                jefe[3]=rs.getString("APELLIDO_MATERNO");
                modelo.addRow(jefe);
            }
            
            
        }catch(Exception e){
        }
    }
 
     void limpiarCampos() {
    txtIdJefe.setText("");
    txtNombre.setText("");
    txtApPaterno.setText("");
    txtApMaterno.setText("");
    } 
    
     void limpiarTabla(){
        DefaultTableModel modelo = (DefaultTableModel) Tabla.getModel();
    modelo.setRowCount(0); // Esto elimina todas las filas de la tabla
    }
    
    void agregar() {
        
    // Aquí puedes deshabilitar el campo de "ID Genero"
    txtIdJefe.setEnabled(true);
      
    String idJefe = txtIdJefe.getText();
    String nombre = txtNombre.getText();
    String ap_paterno = txtApPaterno.getText();
    String ap_materno = txtApMaterno.getText();
    try {
        if (idJefe.isEmpty() || nombre.isEmpty() || ap_paterno.isEmpty() || ap_materno.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Faltan ingresar Datos");
        } else {
            // Verificar si el ID ya existe
            String checkIDQuery = "SELECT COUNT(*) FROM jefe_departamento WHERE ID_JEFE_DEPARTAMENTO=?";
            conec = con.getConnection();
            PreparedStatement checkIDStatement = conec.prepareStatement(checkIDQuery);
            checkIDStatement.setString(1, idJefe);
            ResultSet rs = checkIDStatement.executeQuery();
            rs.next();
            int rowCount = rs.getInt(1);

            // Verificar que otro  no se llame igual
            String checkUsuario = "SELECT COUNT(*) FROM jefe_departamento WHERE NOMBRE=?";
            PreparedStatement checkUsuarioStatement = conec.prepareStatement(checkUsuario);
            checkUsuarioStatement.setString(1, nombre);
            ResultSet rp = checkUsuarioStatement.executeQuery();
            rp.next();
            int rowCount2 = rp.getInt(1);

            if (rowCount > 0) {
                JOptionPane.showMessageDialog(null, "El ID de este jefe_departamento ya existe. Por favor, elige otro ID.");
                limpiarTabla();
            } else if (rowCount2 > 0) {
                JOptionPane.showMessageDialog(null, "El nombre de este jefe_departamento  ya existe. Por favor, elige otro nombre.");
                limpiarTabla();
            }else if(nombre.length() > 30 || idJefe.length() > 10 || ap_paterno.length()> 20 ||ap_materno.length()>20){
                JOptionPane.showMessageDialog(null, "El nombre/contraseña no pueden exceder de 50 caracteres o el ID sobre pasar mas de 10 caracter");
                limpiarTabla();
            }
            else {
                // Si el ID no existe y el nombre no está duplicado, insertar el nuevo registro
                String insertQuery = "INSERT INTO jefe_departamento (ID_JEFE_DEPARTAMENTO,NOMBRE,APELLIDO_PATERNO,APELLIDO_MATERNO) VALUES (?,?,?,?)";
                PreparedStatement insertStatement = conec.prepareStatement(insertQuery);
                insertStatement.setString(1, idJefe);
                insertStatement.setString(2, nombre);
                insertStatement.setString(3,ap_paterno);
                insertStatement.setString(4,ap_materno);
                insertStatement.executeUpdate();
                JOptionPane.showMessageDialog(null, "Nuevo usuario registrado");
                limpiarTabla();
            }
        }
    } catch (Exception e) {
        e.printStackTrace(); // Manejar excepciones adecuadamente, por ejemplo, mostrar un mensaje de error
    }
}
     
      void Eliminar() {
    int fila = Tabla.getSelectedRow();

    try {
        if (fila < 0) {
            JOptionPane.showMessageDialog(null, "Fila no seleccionada para eliminar");
        } else {
            int idJefe = Integer.parseInt(Tabla.getValueAt(fila, 0).toString());

            // Verificar si existen registros relacionados en la tabla "departamento"
            String checkQuejasQuery = "SELECT COUNT(*) FROM departamento WHERE ID_JEFE_DEPARTAMENTO = " + idJefe;
            conec = con.getConnection();
            st = conec.createStatement();
            ResultSet rs = st.executeQuery(checkQuejasQuery);
            rs.next();
            int rowCount = rs.getInt(1);

            if (rowCount > 0) {
                JOptionPane.showMessageDialog(null, "No se puede eliminar el usuario, hay registros de quejas relacionados con este id.");
            } else {
                // No hay registros relacionados, proceder con la eliminación
                String deleteQuery = "DELETE FROM jefe_departamento WHERE ID_JEFE_DEPARTAMENTO=" + idJefe;
                st.executeUpdate(deleteQuery);
                JOptionPane.showMessageDialog(null, "Jefe departamento eliminado con exito");
                limpiarTabla();
            }
        }
    } catch (Exception e) {
        // Manejar excepciones
    }
} 
     
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Tabla;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtApMaterno;
    private javax.swing.JTextField txtApPaterno;
    private javax.swing.JTextField txtIdJefe;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
