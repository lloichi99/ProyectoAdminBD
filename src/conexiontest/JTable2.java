/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package conexiontest;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.PreparedStatement;

/**
 *
 * @author joyce
 */
public class JTable2 extends javax.swing.JFrame {

    Conexion con= new Conexion();
    Connection conec;
    DefaultTableModel modelo;
    Statement st;
    ResultSet rs;
    int idc;
    
    public JTable2() {
        initComponents();
        setLocationRelativeTo(null);
        consultar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtIdCarrera = new javax.swing.JTextField();
        txtNomCar = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        Tabla1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtBuscar = new javax.swing.JTextField();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Carreras");

        jLabel2.setText("Id_Carrera: ");

        jLabel3.setText("Nombre_Carrera: ");

        txtIdCarrera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdCarreraActionPerformed(evt);
            }
        });

        Tabla1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID_CARRERA", "NOMBRE"
            }
        ));
        Tabla1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Tabla1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(Tabla1);

        jButton1.setText("Agregar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Modificar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Eliminar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton5.setText("Salir");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel4.setText("Buscar:");

        txtBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBuscarKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(75, 75, 75)
                                .addComponent(jButton2)
                                .addGap(67, 67, 67)
                                .addComponent(jButton3))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(23, 23, 23)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtNomCar, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(txtIdCarrera, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(54, 54, 54)
                                        .addComponent(jLabel4)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(204, 204, 204)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(55, 55, 55))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtIdCarrera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtNomCar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addGap(28, 28, 28)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtIdCarreraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdCarreraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdCarreraActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // BOTON AGREGAR
        agregar();
        consultar();
        limpiarCampos();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void Tabla1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Tabla1MouseClicked
         int fila = Tabla1.getSelectedRow();
         if(fila== -1){
             JOptionPane.showMessageDialog(null,"No se selcecciona ninguna fila");
             
            }else{
                int id_car = Integer.parseInt((String)Tabla1.getValueAt(fila,0).toString());
                String nom_car = (String) Tabla1.getValueAt(fila,1);
                
                txtIdCarrera.setText(""+id_car);
                txtNomCar.setText(nom_car);
         }
    }//GEN-LAST:event_Tabla1MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // BOTON PARA MODIFICAR
        Modificar();
        consultar();
        limpiarCampos();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // BOTON PARA ELIMINAR
        Eliminar();
        consultar();
        limpiarCampos();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // BOTON SLAIR DE LA TABLA CARRERA
          this.setVisible(false); 
                Menu salir = new Menu();
                salir.setVisible(true);
                setVisible(false);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void txtBuscarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarKeyTyped
          // EVENTO KEY TYPED de la caja de texto buscar                                   
    String nom_car = txtBuscar.getText();
    
    // Debes usar PreparedStatement para evitar problemas de seguridad y consultas SQL inseguras.
    String checkIDQuery = "SELECT * FROM carrera WHERE NOMBRE LIKE ?";
    
    try {
        conec = con.getConnection();
        PreparedStatement pstmt = conec.prepareStatement(checkIDQuery);
        // Utiliza '%' para buscar cualquier descripción que contenga la cadena ingresada.
        pstmt.setString(1, "%" + nom_car + "%");
        ResultSet rs = pstmt.executeQuery();

        // Ahora debes actualizar la tabla con los resultados de la búsqueda.
        DefaultTableModel modelo = (DefaultTableModel) Tabla1.getModel();
        modelo.setRowCount(0); // Limpia la tabla antes de mostrar los resultados.

        while (rs.next()) {
            // Agrega cada fila de resultado a la tabla.
            Object[] fila = {rs.getString("ID_CARRERA"), rs.getString("NOMBRE")};
            modelo.addRow(fila);
        }
    } catch (Exception e) {
        e.printStackTrace();
        // Maneja las excepciones adecuadamente.
    }
    }//GEN-LAST:event_txtBuscarKeyTyped

    void Modificar(){
        String id_car = txtIdCarrera.getText();
        String nom_car = txtNomCar.getText();
        
        try{
            if (id_car.equals("") || nom_car.equals("")) {
            JOptionPane.showMessageDialog(null, "Faltan ingresar Datos");
            limpiarTabla();
            }else{
                //Verificr si el ID que se dese modificar existe 
                String checkIDQuery = "SELECT COUNT(*) FROM carrera WHERE ID_CARRERA=" + id_car;
                conec = con.getConnection();
                st = conec.createStatement();
                ResultSet rs = st.executeQuery(checkIDQuery);
                rs.next();
                int rowCount = rs.getInt(1);
                
                if(rowCount == 0){
                    JOptionPane.showMessageDialog(null, "El ID que deseas modificar no existe.");
                    limpiarTabla();
                }else{
                    //si el ID existe, ahora se pueden realizar actualizaciones
                    String updateQuery = "UPDATE carrera SET NOMBRE = '" + nom_car +"' WHERE ID_CARRERA = " + id_car;
                    st.executeUpdate(updateQuery);
                    JOptionPane.showMessageDialog(null, "Datos de la tabla carrera modificados");
                    limpiarTabla();
                }
            }
        }catch(Exception e){
        
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JTable2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JTable2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JTable2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JTable2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JTable2().setVisible(true);
            }
        });
    }

    
    void consultar(){
        limpiarTabla();
        String sql = "select * from carrera";
        
        try{
            conec = con.getConnection();
            st = conec.createStatement();
            rs = st.executeQuery(sql);
            Object[] carrera = new Object[2];
            modelo = (DefaultTableModel)Tabla1.getModel();
            while(rs.next()){
                carrera[0]= rs.getInt("ID_CARRERA");
                carrera[1]=rs.getString("NOMBRE");
                
                modelo.addRow(carrera);
            }
        }catch(Exception e){
        
        }
    }
   
    
     void limpiarTabla() {
    DefaultTableModel modelo = (DefaultTableModel) Tabla1.getModel();
    modelo.setRowCount(0); // Esto elimina todas las filas de la tabla
    }

     
     
    void limpiarCampos() {
    txtIdCarrera.setText("");
    txtNomCar.setText("");
    } 
    
     void agregar() {
    String id_car = txtIdCarrera.getText();
    String nom_car = txtNomCar.getText();

    try {
        if (id_car.isEmpty() || nom_car.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Faltan ingresar Datos");
        } else {
            // Verificar si el ID ya existe
            String checkIDQuery = "SELECT COUNT(*) FROM carrera WHERE ID_CARRERA=?";
            conec = con.getConnection();
            PreparedStatement checkIDStatement = conec.prepareStatement(checkIDQuery);
            checkIDStatement.setString(1, id_car);
            ResultSet rs = checkIDStatement.executeQuery();
            rs.next();
            int rowCount = rs.getInt(1);

            // Verificar que otra carrera no se llame igual
            String checkCarrera = "SELECT COUNT(*) FROM carrera WHERE NOMBRE=?";
            PreparedStatement checkCarreraStatement = conec.prepareStatement(checkCarrera);
            checkCarreraStatement.setString(1, nom_car);
            ResultSet rp = checkCarreraStatement.executeQuery();
            rp.next();
            int rowCount2 = rp.getInt(1);

            if (rowCount > 0) {
                JOptionPane.showMessageDialog(null, "El ID de carrera ya existe. Por favor, elige otro ID.");
                limpiarTabla();
            } else if (rowCount2 > 0) {
                JOptionPane.showMessageDialog(null, "El nombre de la carrera ya existe. Por favor, elige otro nombre.");
                limpiarTabla();
            }else if(nom_car.length() > 30 || id_car.length() > 1){
                JOptionPane.showMessageDialog(null, "El nombre no puede exceder de 30 caracteres o el ID sobre pasa mas de 1 caracter");
                limpiarTabla();
            }
            else {
                // Si el ID no existe y el nombre no está duplicado, insertar el nuevo registro
                String insertQuery = "INSERT INTO carrera (ID_CARRERA, NOMBRE) VALUES (?, ?)";
                PreparedStatement insertStatement = conec.prepareStatement(insertQuery);
                insertStatement.setString(1, id_car);
                insertStatement.setString(2, nom_car);
                insertStatement.executeUpdate();
                JOptionPane.showMessageDialog(null, "Nueva carrera registrada");
                limpiarTabla();
            }
        }
    } catch (Exception e) {
        e.printStackTrace(); // Manejar excepciones adecuadamente, por ejemplo, mostrar un mensaje de error
    }
}

     
     void Eliminar() {
    int fila = Tabla1.getSelectedRow();

    try {
        if (fila < 0) {
            JOptionPane.showMessageDialog(null, "Fila no seleccionada para eliminar");
        } else {
            int id_car = Integer.parseInt(Tabla1.getValueAt(fila, 0).toString());

            // Verificar si existen registros relacionados en la tabla "alumnos"
            String checkAlumnosQuery = "SELECT COUNT(*) FROM alumnos WHERE ID_CARRERA = " + id_car;
            conec = con.getConnection();
            st = conec.createStatement();
            ResultSet rs = st.executeQuery(checkAlumnosQuery);
            rs.next();
            int rowCount = rs.getInt(1);

            if (rowCount > 0) {
                JOptionPane.showMessageDialog(null, "No se puede eliminar la carrera, hay registros de alumnos relacionados.");
            } else {
                // No hay registros relacionados, proceder con la eliminación
                String deleteQuery = "DELETE FROM carrera WHERE ID_CARRERA=" + id_car;
                st.executeUpdate(deleteQuery);
                JOptionPane.showMessageDialog(null, "Carrera eliminada con exito");
                limpiarTabla();
            }
        }
    } catch (Exception e) {
        // Manejar excepciones
    }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Tabla1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JTextField txtIdCarrera;
    private javax.swing.JTextField txtNomCar;
    // End of variables declaration//GEN-END:variables
}
